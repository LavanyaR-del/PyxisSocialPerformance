<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Outbound_PSR_Shipment" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Zone &amp; Location Setup" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Setup Variables" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">def randomPrefix = org.apache.commons.lang3.RandomStringUtils.randomAlphabetic(20)

vars.put(&quot;zoneName&quot;, &quot;ZoneName-${randomPrefix}&quot;)

vars.put(&quot;locationName&quot;, &quot;locationName-${randomPrefix}&quot;)
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateZone" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
        &quot;zoneName&quot;: &quot;${zoneName}&quot;,&#xd;
        &quot;fulfillmentCenterId&quot;: &quot;${FULFILLMENT_CENTER_ID}&quot;,&#xd;
        &quot;zoneType&quot;: &quot;CHLTWO&quot;,&#xd;
        &quot;zoneStatus&quot;: false,&#xd;
        &quot;ambienceCode&quot;: &quot;CHL&quot;&#xd;
    }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${base_url}/zones/</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-475998559">&quot;zoneId&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="zoneId Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">zoneId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;zoneId&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NotFound</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="WriteDataIntoFile" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">zone = vars.get(&quot;zoneName&quot;);
FileWriter fstream = new FileWriter(&quot;zone.csv&quot;, true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(zone);
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">zone.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">ItemName</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateLocation" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;zoneId&quot;: &quot;${zoneId}&quot;,&#xd;
    &quot;fulfillmentCenterId&quot;: &quot;${FULFILLMENT_CENTER_ID}&quot;,&#xd;
    &quot;locationName&quot;: &quot;${locationName}&quot;,&#xd;
    &quot;locationType&quot;: &quot;SHPSTG&quot;,&#xd;
    &quot;locationStatus&quot;: &quot;EMPTY&quot;,&#xd;
    &quot;trackingType&quot;: &quot;NONE&quot;,&#xd;
    &quot;maximumCapacity&quot;: 1000,&#xd;
    &quot;barCode&quot;: &quot;TESTLOC123456&quot;,&#xd;
    &quot;currentCapacity&quot;: 100&#xd;
    }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${base_url}/locations/</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1444395734">&quot;locationId&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="locationId Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">locationId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;locationId&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NotFound</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="WriteDataIntoFile" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">locationId = vars.get(&quot;locationId&quot;);
FileWriter fstream = new FileWriter(&quot;locationId.csv&quot;, true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(locationId);
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();

locationName = vars.get(&quot;locationName&quot;);
FileWriter fstream = new FileWriter(&quot;locationName.csv&quot;, true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(locationName);
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();


</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">locationId.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">ItemName</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">locationName.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">ItemName</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
        </hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">x-test-name</stringProp>
              <stringProp name="Header.value">create-zone-to-staging</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">X-TENANT-ID</stringProp>
              <stringProp name="Header.value">${tenant}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Common Parameters" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="base_url" elementType="Argument">
              <stringProp name="Argument.name">base_url</stringProp>
              <stringProp name="Argument.value">${__P(base_url, http://localhost:8081)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="tenant" elementType="Argument">
              <stringProp name="Argument.name">tenant</stringProp>
              <stringProp name="Argument.value">${__P(tenant,perftest)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FULFILLMENT_CENTER_ID" elementType="Argument">
              <stringProp name="Argument.name">FULFILLMENT_CENTER_ID</stringProp>
              <stringProp name="Argument.value">PERFTEST-FC-1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="IDENTITY-CONTEXT" elementType="Argument">
              <stringProp name="Argument.name">IDENTITY-CONTEXT</stringProp>
              <stringProp name="Argument.value">eyJhbGciOiJub25lIn0.eyJieV9yZWFsbSI6ImJ5LXJlYWxtIiwic3ViIjoiM2QwNzRjZDItYjcxNy00NjI4LWE0MjUtM2M1MGJhYTdiNDAyIn0.</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Create Shipment1" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="zone" enabled="true">
          <stringProp name="filename">zone.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">zone</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="locationName" enabled="true">
          <stringProp name="filename">locationName.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">locationName</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Setup Variables" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">def randomPrefix = org.apache.commons.lang3.RandomStringUtils.randomAlphabetic(20)

def randomNum = org.apache.commons.lang3.RandomUtils.nextInt()

vars.put(&quot;orderID&quot;, &quot;ORD${randomNum}&quot;)

vars.put(&quot;zoneName&quot;, &quot;${zone}&quot;)

vars.put(&quot;locationName&quot;, &quot;${locationName}&quot;)

vars.put(&quot;lpn&quot;, &quot;lpn-${randomPrefix}&quot;)


vars.put(&quot;expectedDate1&quot;,&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ssX)}&quot;)

vars.put(&quot;expectedDate2&quot;,&quot;${__time(yyyy-MM-dd hh:MM:ss)}&quot;)
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateShipment" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;orders&quot;: [&#xd;
        {&#xd;
            &quot;fulfillmentCenterId&quot;: &quot;${FULFILLMENT_CENTER_ID}&quot;,&#xd;
            &quot;carrierCode&quot;: &quot;CAR02&quot;,&#xd;
            &quot;transportServiceLevelCode&quot;: &quot;GROUND&quot;,  &#xd;
            &quot;shipToId&quot;: &quot;DC0001&quot;,&#xd;
            &quot;shipFromId&quot;: &quot;DC0002&quot;,&#xd;
            &quot;deliveryDateDetails&quot;: {               &#xd;
                &quot;requestedDeliveryBeginDateTime&quot;: &quot;${beginDate}&quot;,&#xd;
                &quot;requestedDeliveryEndDateTime&quot;: &quot;${endDate}&quot;,&#xd;
                &quot;requestedDeliveryDateTime&quot;: &quot;${expectedDate1}&quot;&#xd;
            },&#xd;
                &quot;shipDateDetails&quot;: {&#xd;
                &quot;requestedShipBeginDateTime&quot;: &quot;${expectedDate1}&quot;,&#xd;
                &quot;requestedShipEndDateTime&quot;: &quot;${expectedDate1}&quot;,&#xd;
                &quot;requestedShipDateTime&quot;: &quot;${expectedDate1}&quot;&#xd;
            },&#xd;
            &quot;lineItems&quot;: [&#xd;
                {&#xd;
                    &quot;itemName&quot;: &quot;3b5c31e6-bf87-4d11-ba5b-685615278ab4&quot;,&#xd;
                    &quot;orderNumber&quot;: &quot;${orderID}&quot;,&#xd;
                    &quot;orderLineNumber&quot;: &quot;${random}&quot;,&#xd;
                    &quot;requestedQty&quot;: 1,&#xd;
                    &quot;requestedQtyUOM&quot;: &quot;EA&quot;,&#xd;
                    &quot;stagedQuantity&quot;: 1,&#xd;
                    &quot;stagedQuantityUOM&quot;: 1,&#xd;
                    &quot;orderLineNumber&quot;: &quot;1&quot;&#xd;
                }&#xd;
            ],&#xd;
            &quot;contact&quot;: [&#xd;
                {&#xd;
                    &quot;contactName&quot;: &quot;John Denver&quot;,&#xd;
                    &quot;contactNumber&quot;: &quot;8050799278&quot;,&#xd;
                    &quot;contactType&quot;: &quot;shipTo&quot;&#xd;
                }&#xd;
            ],&#xd;
            &quot;addressItems&quot;: [&#xd;
                {&#xd;
                    &quot;postalCode&quot;: &quot;6666&quot;,&#xd;
                    &quot;streetAddress&quot;: &quot;chicago&quot;,&#xd;
                    &quot;city&quot;: &quot;CH&quot;,&#xd;
                    &quot;country&quot;: &quot;USA&quot;,&#xd;
                    &quot;addressType&quot;: &quot;shipTo&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;postalCode&quot;: &quot;6666&quot;,&#xd;
                    &quot;streetAddress&quot;: &quot;michigan&quot;,&#xd;
                    &quot;city&quot;: &quot;WI&quot;,&#xd;
                    &quot;country&quot;: &quot;USA&quot;,&#xd;
                    &quot;addressType&quot;: &quot;routeTo&quot;&#xd;
                }&#xd;
            ]&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${base_url}/shipments/</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="WriteDataIntoFile" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script"> FileWriter fstream = new FileWriter(&quot;staging-reservation.sql&quot;, true);
 BufferedWriter out = new BufferedWriter(fstream);
out.write(&quot;INSERT INTO outbound_service.staging_reservation(reservation_id,location_id,shipment_id,inventory_id,created_at,updated_at,correlation_id,order_number,deposit_status,shipment_line_id,picked_quantity)VALUES&quot;);
 out.write(System.getProperty(&quot;line.separator&quot;));
 out.close();
 fstream.close();


 FileWriter fstream = new FileWriter(&quot;delivery-task.sql&quot;, true);
 BufferedWriter out = new BufferedWriter(fstream);
out.write(&quot;INSERT INTO outbound_service.delivery_task(task_id,reservation_id,fulfillment_center_id,shipment_id,inventory_id,status,order_number,src_zone_name,src_location_name,dst_zone_name,dst_location_name,due_pickup_date,submitted_date,completed_date,created_at,updated_at,correlation_id,task_type,early_ship_date_time,late_ship_date_time,tracking_number,carrier_code)VALUES&quot;);
 out.write(System.getProperty(&quot;line.separator&quot;));
 out.close();
 fstream.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1961059185">&quot;shipmentId&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="shipmentId Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">uuid</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;shipmentId&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NotFound</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="shipmentLineId Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">shipmentLineId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;shipmentLineId&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NotFound</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">orderNumber</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..orderNumber</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="WriteDataIntoFile" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">orderno = vars.get(&quot;orderNumber&quot;);
FileWriter fstream = new FileWriter(&quot;orderId.csv&quot;, true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(orderno);
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();

lpn = vars.get(&quot;lpn&quot;);
FileWriter fstream = new FileWriter(&quot;lpn.csv&quot;, true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(lpn);
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();

 FileWriter fstream = new FileWriter(&quot;staging-reservation.sql&quot;, true);
 BufferedWriter out = new BufferedWriter(fstream);
 out.write(&quot;(&apos;&quot;);
 out.write(vars.get(&quot;uuid&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(&quot;${__StringFromFile(locationId.csv,locationId)}&quot;);
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(vars.get(&quot;uuid&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(vars.get(&quot;lpn&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(vars.get(&quot;expectedDate2&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(vars.get(&quot;expectedDate2&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(vars.get(&quot;orderID&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(&quot;1&quot;);
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(vars.get(&quot;shipmentLineId&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(&quot;3&quot;);
 out.write(&quot;&apos;);&quot;);

 out.write(System.getProperty(&quot;line.separator&quot;));
 out.close();
 fstream.close();


FileWriter fstream = new FileWriter(&quot;delivery-task.sql&quot;, true);
 BufferedWriter out = new BufferedWriter(fstream);
 out.write(&quot;(&apos;&quot;);
 out.write(vars.get(&quot;uuid&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(vars.get(&quot;uuid&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(vars.get(&quot;FULFILLMENT_CENTER_ID&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(vars.get(&quot;uuid&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
out.write(vars.get(&quot;lpn&quot;));
out.write(&quot;&apos;,&apos;&quot;);
out.write(&quot;CREATED_ON_HOLD&quot;);
out.write(&quot;&apos;,&apos;&quot;);
 out.write(vars.get(&quot;orderID&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
out.write(vars.get(&quot;zoneName&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
out.write(vars.get(&quot;locationName&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(vars.get(&quot;zoneName&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
out.write(vars.get(&quot;locationName&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(vars.get(&quot;expectedDate2&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(vars.get(&quot;expectedDate2&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(vars.get(&quot;expectedDate2&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(vars.get(&quot;expectedDate2&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(vars.get(&quot;expectedDate2&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(&quot;&apos;,&apos;&quot;);
out.write(vars.get(&quot;expectedDate2&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
out.write(vars.get(&quot;expectedDate2&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(&quot;&apos;);&quot;);
  out.write(System.getProperty(&quot;line.separator&quot;));
 out.close();
 fstream.close();



 

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">orderId.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">ItemName</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">lpn.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">ItemName</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
        </hashTree>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
          <stringProp name="maximumValue">9999</stringProp>
          <stringProp name="minimumValue">100</stringProp>
          <stringProp name="outputFormat">000</stringProp>
          <boolProp name="perThread">true</boolProp>
          <stringProp name="randomSeed">100</stringProp>
          <stringProp name="variableName">random</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">x-test-name</stringProp>
              <stringProp name="Header.value">create-zone-to-staging</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">X-TENANT-ID</stringProp>
              <stringProp name="Header.value">${tenant}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Common Parameters" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="base_url" elementType="Argument">
              <stringProp name="Argument.name">base_url</stringProp>
              <stringProp name="Argument.value">${__P(base_url, http://localhost:8081)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="tenant" elementType="Argument">
              <stringProp name="Argument.name">tenant</stringProp>
              <stringProp name="Argument.value">${__P(tenant,perftest)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FULFILLMENT_CENTER_ID" elementType="Argument">
              <stringProp name="Argument.name">FULFILLMENT_CENTER_ID</stringProp>
              <stringProp name="Argument.value">PERFTEST-FC-1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="IDENTITY-CONTEXT" elementType="Argument">
              <stringProp name="Argument.name">IDENTITY-CONTEXT</stringProp>
              <stringProp name="Argument.value">eyJhbGciOiJub25lIn0.eyJieV9yZWFsbSI6ImJ5LXJlYWxtIiwic3ViIjoiM2QwNzRjZDItYjcxNy00NjI4LWE0MjUtM2M1MGJhYTdiNDAyIn0.</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="224443650">requestedDeliveryBeginDateTime</stringProp>
            <stringProp name="-855291212">requestedDeliveryEndDateTime</stringProp>
            <stringProp name="-573981891">requestedDeliveryDateTime</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="1858827730">
              <stringProp name="-542981251">${beginDate}</stringProp>
              <stringProp name="-58057653">${endDate}</stringProp>
              <stringProp name="328803204">${deliveryDate}</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="TimeRangeFunctionCall" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">String intToString(int createdInt) {
	if (createdInt&gt;=1 &amp;&amp; createdInt &lt;10) {
		return (&quot;0&quot;+Integer.toString(createdInt));
	}return Integer.toString(createdInt);
}

String randBetween(int start, int end) {
	createdInt = start + (int)Math.round(Math.random() * (end - start));
	return intToString(createdInt);
}

String incrementValue(String val, int inc) {
	return intToString(Integer.parseInt(val) + inc);
}
year = randBetween(2019, 2020);
beginDate = randBetween(1,28);
endDate = incrementValue(beginDate, 1);
month = randBetween(1,12);
hour = randBetween(1,23);
min = randBetween(1,59);
sec = randBetween(1,59);
stringBeginDateTime = year+&quot;-&quot;+month+&quot;-&quot;+beginDate+&quot;T&quot;+hour+&quot;:&quot;+min+&quot;:&quot;+sec+&quot;+01:00&quot;;
stringEndDateTime = year+&quot;-&quot;+month+&quot;-&quot;+endDate+&quot;T&quot;+hour+&quot;:&quot;+min+&quot;:&quot;+sec+&quot;+01:00&quot;;
System.out.println(&quot;Date:&quot; +stringBeginDateTime);
vars.put(&quot;beginDate&quot;, stringBeginDateTime);
vars.put(&quot;endDate&quot;, stringEndDateTime);



</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="locationName" enabled="true">
          <stringProp name="filename">locationName.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">locationName</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="zone" enabled="true">
          <stringProp name="filename">zone.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">zone</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Setup Variables" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">def randomPrefix = org.apache.commons.lang3.RandomStringUtils.randomAlphabetic(20)

def randomNum = org.apache.commons.lang3.RandomUtils.nextInt()

vars.put(&quot;orderID&quot;, &quot;ORD${randomNum}&quot;)

vars.put(&quot;zoneName&quot;, &quot;${zone}&quot;)

vars.put(&quot;locationName&quot;, &quot;${locationName}&quot;)

vars.put(&quot;lpn&quot;, &quot;lpn-${randomPrefix}&quot;)


vars.put(&quot;expectedDate1&quot;,&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ssX)}&quot;)

vars.put(&quot;expectedDate2&quot;,&quot;${__time(yyyy-MM-dd hh:MM:ss)}&quot;)
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateShipment" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;orders&quot;: [&#xd;
        {&#xd;
            &quot;fulfillmentCenterId&quot;: &quot;${FULFILLMENT_CENTER_ID}&quot;,&#xd;
            &quot;carrierCode&quot;: &quot;CAR02&quot;,&#xd;
            &quot;transportServiceLevelCode&quot;: &quot;GROUND&quot;,  &#xd;
            &quot;shipToId&quot;: &quot;DC0001&quot;,&#xd;
            &quot;shipFromId&quot;: &quot;DC0002&quot;,&#xd;
            &quot;deliveryDateDetails&quot;: {               &#xd;
                &quot;requestedDeliveryBeginDateTime&quot;: &quot;${beginDate}&quot;,&#xd;
                &quot;requestedDeliveryEndDateTime&quot;: &quot;${endDate}&quot;,&#xd;
                &quot;requestedDeliveryDateTime&quot;: &quot;${expectedDate1}&quot;&#xd;
            },&#xd;
                &quot;shipDateDetails&quot;: {&#xd;
                &quot;requestedShipBeginDateTime&quot;: &quot;${expectedDate1}&quot;,&#xd;
                &quot;requestedShipEndDateTime&quot;: &quot;${expectedDate1}&quot;,&#xd;
                &quot;requestedShipDateTime&quot;: &quot;${expectedDate1}&quot;&#xd;
            },&#xd;
            &quot;lineItems&quot;: [&#xd;
                {&#xd;
                    &quot;itemName&quot;: &quot;3b5c31e6-bf87-4d11-ba5b-685615278ab4&quot;,&#xd;
                    &quot;orderNumber&quot;: &quot;${orderID}&quot;,&#xd;
                    &quot;orderLineNumber&quot;: &quot;${random}&quot;,&#xd;
                    &quot;requestedQty&quot;: 1,&#xd;
                    &quot;requestedQtyUOM&quot;: &quot;EA&quot;,&#xd;
                    &quot;stagedQuantity&quot;: 1,&#xd;
                    &quot;stagedQuantityUOM&quot;: 1,&#xd;
                    &quot;orderLineNumber&quot;: &quot;1&quot;&#xd;
                }&#xd;
            ],&#xd;
            &quot;contact&quot;: [&#xd;
                {&#xd;
                    &quot;contactName&quot;: &quot;John Denver&quot;,&#xd;
                    &quot;contactNumber&quot;: &quot;8050799278&quot;,&#xd;
                    &quot;contactType&quot;: &quot;shipTo&quot;&#xd;
                }&#xd;
            ],&#xd;
            &quot;addressItems&quot;: [&#xd;
                {&#xd;
                    &quot;postalCode&quot;: &quot;6666&quot;,&#xd;
                    &quot;streetAddress&quot;: &quot;chicago&quot;,&#xd;
                    &quot;city&quot;: &quot;CH&quot;,&#xd;
                    &quot;country&quot;: &quot;USA&quot;,&#xd;
                    &quot;addressType&quot;: &quot;shipTo&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;postalCode&quot;: &quot;6666&quot;,&#xd;
                    &quot;streetAddress&quot;: &quot;michigan&quot;,&#xd;
                    &quot;city&quot;: &quot;WI&quot;,&#xd;
                    &quot;country&quot;: &quot;USA&quot;,&#xd;
                    &quot;addressType&quot;: &quot;routeTo&quot;&#xd;
                }&#xd;
            ]&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${base_url}/shipments/</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="WriteDataIntoFile" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script"> FileWriter fstream = new FileWriter(&quot;staging-reservation.sql&quot;, true);
 BufferedWriter out = new BufferedWriter(fstream);
out.write(&quot;INSERT INTO outbound_service.staging_reservation(reservation_id,location_id,shipment_id,inventory_id,created_at,updated_at,correlation_id,order_number,deposit_status,shipment_line_id,picked_quantity)VALUES&quot;);
 out.write(System.getProperty(&quot;line.separator&quot;));
 out.close();
 fstream.close();


 FileWriter fstream = new FileWriter(&quot;delivery-task.sql&quot;, true);
 BufferedWriter out = new BufferedWriter(fstream);
out.write(&quot;INSERT INTO outbound_service.delivery_task(task_id,reservation_id,fulfillment_center_id,shipment_id,inventory_id,status,order_number,src_zone_name,src_location_name,dst_zone_name,dst_location_name,due_pickup_date,submitted_date,completed_date,created_at,updated_at,correlation_id,task_type,early_ship_date_time,late_ship_date_time,tracking_number,carrier_code)VALUES&quot;);
 out.write(System.getProperty(&quot;line.separator&quot;));
 out.close();
 fstream.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1961059185">&quot;shipmentId&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="shipmentId Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">uuid</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;shipmentId&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NotFound</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="shipmentLineId Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">shipmentLineId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;shipmentLineId&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NotFound</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">orderNumber</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..orderNumber</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="WriteDataIntoFile" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">orderno = vars.get(&quot;orderNumber&quot;);
FileWriter fstream = new FileWriter(&quot;orderId.csv&quot;, true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(orderno);
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();

lpn = vars.get(&quot;lpn&quot;);
FileWriter fstream = new FileWriter(&quot;lpn.csv&quot;, true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(lpn);
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();

 FileWriter fstream = new FileWriter(&quot;staging-reservation.sql&quot;, true);
 BufferedWriter out = new BufferedWriter(fstream);
 out.write(&quot;(&apos;&quot;);
 out.write(vars.get(&quot;uuid&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(&quot;${__StringFromFile(locationId.csv,locationId)}&quot;);
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(vars.get(&quot;uuid&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(vars.get(&quot;lpn&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(vars.get(&quot;expectedDate2&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(vars.get(&quot;expectedDate2&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(vars.get(&quot;orderID&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(&quot;1&quot;);
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(vars.get(&quot;shipmentLineId&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(&quot;3&quot;);
 out.write(&quot;&apos;);&quot;);

 out.write(System.getProperty(&quot;line.separator&quot;));
 out.close();
 fstream.close();


FileWriter fstream = new FileWriter(&quot;delivery-task.sql&quot;, true);
 BufferedWriter out = new BufferedWriter(fstream);
 out.write(&quot;(&apos;&quot;);
 out.write(vars.get(&quot;uuid&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(vars.get(&quot;uuid&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(vars.get(&quot;FULFILLMENT_CENTER_ID&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(vars.get(&quot;uuid&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
out.write(vars.get(&quot;lpn&quot;));
out.write(&quot;&apos;,&apos;&quot;);
out.write(&quot;CREATED_ON_HOLD&quot;);
out.write(&quot;&apos;,&apos;&quot;);
 out.write(vars.get(&quot;orderID&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
out.write(vars.get(&quot;zoneName&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
out.write(vars.get(&quot;locationName&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(vars.get(&quot;zoneName&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
out.write(vars.get(&quot;locationName&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(vars.get(&quot;expectedDate2&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(vars.get(&quot;expectedDate2&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(vars.get(&quot;expectedDate2&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(vars.get(&quot;expectedDate2&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(vars.get(&quot;expectedDate2&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(&quot;&apos;,&apos;&quot;);
out.write(vars.get(&quot;expectedDate2&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
out.write(vars.get(&quot;expectedDate2&quot;));
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(&quot;&apos;,&apos;&quot;);
 out.write(&quot;&apos;);&quot;);
  out.write(System.getProperty(&quot;line.separator&quot;));
 out.close();
 fstream.close();



 

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">orderId.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">ItemName</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">lpn.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">ItemName</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
        </hashTree>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
          <stringProp name="maximumValue">9999</stringProp>
          <stringProp name="minimumValue">100</stringProp>
          <stringProp name="outputFormat">000</stringProp>
          <boolProp name="perThread">true</boolProp>
          <stringProp name="randomSeed">100</stringProp>
          <stringProp name="variableName">random</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">x-test-name</stringProp>
              <stringProp name="Header.value">create-zone-to-staging</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">X-TENANT-ID</stringProp>
              <stringProp name="Header.value">${tenant}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Common Parameters" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="base_url" elementType="Argument">
              <stringProp name="Argument.name">base_url</stringProp>
              <stringProp name="Argument.value">${__P(base_url, http://localhost:8081)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="tenant" elementType="Argument">
              <stringProp name="Argument.name">tenant</stringProp>
              <stringProp name="Argument.value">${__P(tenant,perftest)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FULFILLMENT_CENTER_ID" elementType="Argument">
              <stringProp name="Argument.name">FULFILLMENT_CENTER_ID</stringProp>
              <stringProp name="Argument.value">PERFTEST-FC-1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="IDENTITY-CONTEXT" elementType="Argument">
              <stringProp name="Argument.name">IDENTITY-CONTEXT</stringProp>
              <stringProp name="Argument.value">eyJhbGciOiJub25lIn0.eyJieV9yZWFsbSI6ImJ5LXJlYWxtIiwic3ViIjoiM2QwNzRjZDItYjcxNy00NjI4LWE0MjUtM2M1MGJhYTdiNDAyIn0.</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="224443650">requestedDeliveryBeginDateTime</stringProp>
            <stringProp name="-855291212">requestedDeliveryEndDateTime</stringProp>
            <stringProp name="-573981891">requestedDeliveryDateTime</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="1858827730">
              <stringProp name="-542981251">${beginDate}</stringProp>
              <stringProp name="-58057653">${endDate}</stringProp>
              <stringProp name="328803204">${deliveryDate}</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="TimeRangeFunctionCall" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">String intToString(int createdInt) {
	if (createdInt&gt;=1 &amp;&amp; createdInt &lt;10) {
		return (&quot;0&quot;+Integer.toString(createdInt));
	}return Integer.toString(createdInt);
}

String randBetween(int start, int end) {
	createdInt = start + (int)Math.round(Math.random() * (end - start));
	return intToString(createdInt);
}

String incrementValue(String val, int inc) {
	return intToString(Integer.parseInt(val) + inc);
}
year = randBetween(2019, 2020);
beginDate = randBetween(1,28);
endDate = incrementValue(beginDate, 1);
month = randBetween(1,12);
hour = randBetween(1,23);
min = randBetween(1,59);
sec = randBetween(1,59);
stringBeginDateTime = year+&quot;-&quot;+month+&quot;-&quot;+beginDate+&quot;T&quot;+hour+&quot;:&quot;+min+&quot;:&quot;+sec+&quot;+01:00&quot;;
stringEndDateTime = year+&quot;-&quot;+month+&quot;-&quot;+endDate+&quot;T&quot;+hour+&quot;:&quot;+min+&quot;:&quot;+sec+&quot;+01:00&quot;;
System.out.println(&quot;Date:&quot; +stringBeginDateTime);
vars.put(&quot;beginDate&quot;, stringBeginDateTime);
vars.put(&quot;endDate&quot;, stringEndDateTime);



</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="notify" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="OrderNumber" enabled="true">
          <stringProp name="filename">orderId.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">orderNumber</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="notify" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
       &quot;orderNumber&quot;: &quot;${orderNumber}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${base_url}/deliveryTasks/actions/notify/</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Common Parameters" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="base_url" elementType="Argument">
              <stringProp name="Argument.name">base_url</stringProp>
              <stringProp name="Argument.value">${__P(base_url, http://localhost:8080)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="tenant" elementType="Argument">
              <stringProp name="Argument.name">tenant</stringProp>
              <stringProp name="Argument.value">${__P(tenant,perftest)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FULFILLMENT_CENTER_ID" elementType="Argument">
              <stringProp name="Argument.name">FULFILLMENT_CENTER_ID</stringProp>
              <stringProp name="Argument.value">PERFTEST-FC-1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="IDENTITY-CONTEXT" elementType="Argument">
              <stringProp name="Argument.name">IDENTITY-CONTEXT</stringProp>
              <stringProp name="Argument.value">eyJhbGciOiJub25lIn0.eyJieV9yZWFsbSI6ImJ5LXJlYWxtIiwic3ViIjoiM2QwNzRjZDItYjcxNy00NjI4LWE0MjUtM2M1MGJhYTdiNDAyIn0.</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">x-test-name</stringProp>
              <stringProp name="Header.value">create-zone-to-staging</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">X-TENANT-ID</stringProp>
              <stringProp name="Header.value">${tenant}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="complete shipment" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">2</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="OrderNumber" enabled="true">
          <stringProp name="filename">orderId.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">orderNumber</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Lpn" enabled="true">
          <stringProp name="filename">lpn.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">Lpn</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="completeOrder" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;orderDetails&quot;: [&#xd;
        {&#xd;
            &quot;orderNumber&quot;: &quot;${orderNumber}&quot;,&#xd;
            &quot;lpnList&quot;: [&#xd;
                &quot;${Lpn}&quot;&#xd;
            ]&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${base_url}/shipments/actions/complete/</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Common Parameters" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="base_url" elementType="Argument">
              <stringProp name="Argument.name">base_url</stringProp>
              <stringProp name="Argument.value">${__P(base_url, http://localhost:8081)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="tenant" elementType="Argument">
              <stringProp name="Argument.name">tenant</stringProp>
              <stringProp name="Argument.value">${__P(tenant,perftest)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FULFILLMENT_CENTER_ID" elementType="Argument">
              <stringProp name="Argument.name">FULFILLMENT_CENTER_ID</stringProp>
              <stringProp name="Argument.value">PERFTEST-FC-1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="IDENTITY-CONTEXT" elementType="Argument">
              <stringProp name="Argument.name">IDENTITY-CONTEXT</stringProp>
              <stringProp name="Argument.value">eyJhbGciOiJub25lIn0.eyJieV9yZWFsbSI6ImJ5LXJlYWxtIiwic3ViIjoiM2QwNzRjZDItYjcxNy00NjI4LWE0MjUtM2M1MGJhYTdiNDAyIn0.</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">x-test-name</stringProp>
              <stringProp name="Header.value">create-zone-to-staging</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">X-TENANT-ID</stringProp>
              <stringProp name="Header.value">${tenant}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
